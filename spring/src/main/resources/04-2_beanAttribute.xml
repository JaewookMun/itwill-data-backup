<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- init-method 속성 : Spring Bean이 객체로 생성 후 한번만 호출되어 초기화 작업을
	실행하기 위한 메소드명을 속성값으로 설정 - 자동 완성 기능 사용 가능 -->
	<!-- destroy-method 속성 : Spring Bean이 객체로 소멸 전 한번만 호출되어 마무리 작업을
	실행하기 위한 메소드명을 속성값으로 설정 - 자동 완성 기능 사용 가능 -->
	<bean class="xyz.itwill04.bean.InitDestroyMethodBean" id="initDestroyMethodBean"
		init-method="init" destroy-method="destroy"/>
		
	<!-- lazy-init 속성 : false 또는 true 중 하나를 속성값으로 설정 -->	
	<!-- => false(기본) : Spring Bean 객체 미리 생성, true : Spring Bean 객체 사용시 생성 -->
	<!-- => lazy-init 속성값을 true로 설정한 경우 getBean() 메소드 호출 시 Spring Bean 객체 생성 -->
		<!-- 조건에 따라 bean 객체를 나중에 생성할 수 있다. -->
	<bean class="xyz.itwill04.bean.LazyInitBean" id="lazyInitBean" lazy-init="true"/>	
		<!-- class 속성은 필수지만 다른 속성은 필요없을 시  만들지 않아도 됨. -->
	
	<!-- 싱글톤 클래스 : 프로그램에 객체를 하나만 제공하기 위해 작성된 클래스 -->
	<!-- Spring Container는 리플렉션 기능을 이용하여 객체 생성 -->
	<!-- => 생성자가 은닉화 선언되어 있어도 리플렉션 기능에 의해 생성자 사용 가능 -->
	<!-- 리플렉션 기능에 의해 클래스가 메모리에 저장된 후 정적영역의 명령으로 객체 생성 -->
	<!-- => 정적영역에서 생성된 객체와 Spring Container에 의해 생성된 객체가 존재 -->
	<!-- factory-method 속성 : 싱글톤 클래스에서 객체를 반환하는 메소드를 속성값으로 설정 -->
	<!-- => Spring Container에 의해 객체를 생성하지 않고 정적영역에서 생성된 객체를 Spring Bean 객체로 사용 -->
		<!-- reflextion(class 속성에 표기한 클래스를 메모리에 로드시키고 해당 클래즈 정보로 생성자 호출) > 접근지정자에 영향을 안받는다. -->
		<!-- static 영역에 의해 생성 & spring container의 리플렉션을 통해 생성 -->
		<!-- 정적영역에서 생성된 객체를 factory-method를 이용해 bean객체로 사용가능 -->
	<bean class="xyz.itwill04.bean.FactoryMethodBean" factory-method="getFactoryMethodBean"/>	
		<!-- class 외 다른 속성을 선택 안하고 컨테이너를 초기화하면 싱글턴클래스(FactoryMethodBean)의 객체가 두개 생성 - 생성자 두번호출 -->
	
	<!-- Spring Container는 bean 엘리먼트 선언 순서대로 등록된 클래스를 Spring Bean 객체로 생성 -->
	<!-- depends-on : 다른 bean 엘리먼트의 beanName을 속성값으로 설정 -->
	<!-- => 속성값으로 설정된 bean 엘리먼트의 클래스를 먼저 Spring Bean 객체로 생성 -->
		<!-- dependsOnTwobean을 먼저 생성한다는 코드 - 관계에 따라 먼저 생성해야하는 객체 설정가능 -->
	<bean class="xyz.itwill04.bean.DependsOnOneBean" depends-on="dependsOnTwoBean"/>	
	<bean class="xyz.itwill04.bean.DependsOnTwoBean" id="dependsOnTwoBean"/>
	
	<!-- scope 속성 : Spring Bean 객체의 생성 갯수(singleton:기본 OR prototype) 또는 
	사용범위(request OR session) 중 하나를 속성값으로 설정 -->
	<!-- scope 속성값으로 singleton을 설정한 경우 bean 엘리먼트에 의해 등록된 클래스로
	Spring Bean 객체를 하나만 셍성하여 제공 -->
		<!-- 위 넷 중 하나를 선택 -->
		<!-- 사용범위(request, session)는 웹프로그램에서 사용하는 속성값이다. -->
		<!-- Spring에서는 싱글턴 패턴을 사용할 필요가 없음. -->
	<bean class="xyz.itwill04.bean.ScopeBean" id="singleton" lazy-init="true" scope="singleton"/>	
	
	<!-- scope 속성값으로 prototype을 설정한 경우 bean 엘리먼트에 의해 등록된 클래스로
	Spring Bean 객체를 여러개 셍성하여 제공 -->
	<!-- => lazy-init 속성값을 반드시 true로 설정하여 사용 -->
	<bean class="xyz.itwill04.bean.ScopeBean" id="prototype" lazy-init="true" scope="prototype"/>	
		<!-- 하나는 한번만, prototpye은 달라고 할때마다. -->
</beans>
