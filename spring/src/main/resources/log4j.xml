<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<!-- log4j : 장치에 기록하는 로그 구현 프로그램 -->
<!-- => log4j.xml 파일을 이용하여 기록 관련 정보 설정 -->
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
		<!-- 다른 엘리먼트와 비교하기 위해 네임스페이스를 사용하는 경우 존재 -->
	<!-- Appenders -->
	<!-- appender : 로그 전달 방식과 로그 형식을 설정하는 엘리먼트 -->
	<!-- name 속성 : appender 엘리먼트의 식별자를 속성값으로 설정 -->
	<!-- class 속성 : Appender 인터페이스를 상속받은 로그 구현체 클래스를 속성값으로 설정 -->
	<!-- https://logging.apache.org/log4j/1.2/apidocs -->
		<!-- 기록할 클래스를 입력 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<!-- param : Appender 클래스에 필요한 값을 제공하는 엘리먼트 -->
		<!-- => Appender 클래스마다 값을 전달하기 위한 이름을 다르게 설정 -->
		<!-- name 속성 : 전달값을 저장하기 위한 식별자를 속성값으로 설정 -->
		<!-- value 속성 : 전달값을 속성값으로 설정 -->
			<!-- Target을 설정하지 않으면 default target 은 'System.out'이다. -->
			<!-- 로그이벤트가 있을 때 로그파일에서 로그 진행 -->
		<param name="Target" value="System.out" />
		<!-- layout : 로그 형식을 설정하는 엘리먼트 -->
		<!-- class 속성 : 로그 형식을 제공하는 클래스를 속성값으로 설정 -->
			<!-- PatternLayout 클래스 : 패턴형태로 로그 기록 -->
		<layout class="org.apache.log4j.PatternLayout">
			<!-- param : Layout 클래스에 필요한 값을 제공하는 엘리먼트 -->
			<!-- PatternLayout 클래스는 [ConversionPattern]이라는 이름으로 로그 패턴
			(Conversion Character)의 로그 형식 제공 -->
			<!-- # Conversion Character # -->
			<!-- %c : 패키지가 포함된 클래스 이름을 기록 - {정수값}을 이용하여 원하는 형식으로 변환 가능 -->
			<!-- => %c{1} : 패키지를 제외한 클래스 이름만 기록 -->
			<!-- %d : 날짜와 시간을 기록 - {SimpleDateFormatPattern}을 이용하여 원하는 형식으로 변환 가능 -->
			<!-- => %d{yyyy-MM-dd} : [년-월-일] 형식으로 날짜만 기록 -->
			<!-- %m : 로그 메세지 기록 -->
			<!-- %n : 엔터(Enter) 기록 - 로그 줄바꿈 -->
			<!-- %M : 호출 메소드 이름 기록 -->
			<!-- %p : 로그 이벤트 기록 - TRACE > DEBUG > INFO > WARN > ERROR > FATAL -->
			<!-- %r : 처리 시간 기록 -->
			<!-- %f : 처리 스레드 이름 기록 -->
				<!-- trace - 무조건적인 기록 (우측으로 갈수록 상위레벨), 하위레벨로 지정하면 해당 레벨보다 상위레벨은 모두 기록된다. -->
				<!-- 보편적으로 사용 > INFO -->
				<!-- 어떤 클래스가 어떤 메소드를 사용했는지 확인 가능 -->
			<!-- # Conversion Character의 자릿수 설정 가능 # -->
			<!-- => %p : 로그 이벤트의 길이만큼 자릿수 제공 -->
			<!-- => %자리수p : 로그 이벤트의 최대 자릿수를 설정하여 제공(오른쪽 정렬) -->
			<!-- => %.자리수p : 로그 이벤트의 최소 자릿수를 설정하여 제공(오른쪽 정렬) -->
			<!-- => %-자리수p : 로그 이벤트의 최대 자릿수를 설정하여 제공(왼쪽 정렬) -->
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	<appender name="sample" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%c{1} 클래스의 %M 메소드 - %m%n"/>
		</layout>
	</appender>
	
		<!-- FileAppender - 하나의 파일을 사용 -->
		<!-- DailyRollingFileAppender - 날마다 기록하는 파일이 바뀜 -->
	<appender name="dailyLogFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="dailyLog"/>
			<!-- 파일 뒤 날짜는 당일에는 안보이고 다음날부터 보인다. -->
		<param name="DatePattern" value=".yyyy-MM-dd"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{HH:mm:ss}]%-5p: %c - %m%n"/>
		</layout>
	</appender>
	
	<!-- logger : 기록자(Appender)를 이용하여 로그를 구현하기 위한 엘리먼트 -->
	<!-- name 속성 : 기록자가 구현될 특정 팩키지 경로를 속성값으로 설정 -->
		<!-- 위의 Appender로 어떤 장치를 통해 기록할지를 설정하면 logger를 통해 기록주체를 지정 -->
		<!-- -> 기록주체보다는 기록대상이 어울린다고 생각된다. -->
		<!-- xyz.itwill.controller가 동작(실행)되면 appender를 통해 기록 -->
		<!-- 로거에 설정된 클래스 외 다른 팩키지에 있는 클래스가 동작될 때는 기록이 발생하지 않는다. -->
	<!-- Application Loggers -->
	<logger name="xyz.itwill.controller">
		<!-- level : 로그 이벤트를 설정하기 위한 엘리먼트 -->
		<!-- value 속성 : 로그 이벤트를 속성값으로 설정 -->
			<!-- info 레벨 이상의 이벤트를 기록하도록 설정 -->
			<!-- 클래스를 만들고 기록하게 만들고 싶다면 logger에 설정해야함 -->
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
		<!-- 프레임워크 관련 로거 -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- additivity 속성 : false 속성 또는 true 중 하나를 속성값으로 설정 -->
	<!-- => false : root 엘리먼트의 appender 제외, true(기본) : root 엘리먼트의 appender 포함 -->
	<logger name="xyz.itwill00.log" additivity="false">
		<level value="info"/>
			<!-- 해당 팩키지에서 appender sample 을 참고하여 사용 -->
			<!-- console appender 와 sample appender 두개를 사용 .  -->
		<appender-ref ref="sample"/>
		<appender-ref ref="dailyLogFile"/>
	</logger>

	<logger name="xyz.itwill07.aop">
		<level value="info"/>
	</logger>

	<logger name="xyz.itwill10.controller">
		<level value="info"/>
	</logger>

	<!-- jdbc.sqlonly : 완성된 SQL 명령 기록 -->
	<logger name="jdbc.sqlonly">
		<level value="info"/>
	</logger>

	<!-- jdbc.sqltiming : SQL 명령의 실행시간(ms) 기록 -->
	<logger name="jdbc.sqltiming">
		<level value="info"/>
	</logger>

	<!-- jdbc.audit : ResultSet 관련 정보를 제외한 모든 JDBC 관련 정보 기록 -->
	<logger name="jdbc.audit">
		<level value="info"/>
	</logger>

	<!-- jdbc.resultset : ResultSet 관련 정보를 포함한 모든 JDBC 관련 정보 기록 -->
	<!--  
	<logger name="jdbc.resultset">
		<level value="info"/>
	</logger>
	-->
		<!-- audit or resultset 을 사용하는데 resultset까지는 크게 볼 필요가 없다. -->

		
	<!-- jdbc.resultsettable : ResultSet 관련 정보를 테이블 형식으로 기록 -->
	<logger name="jdbc.resultsettable">
		<level value="info"/>
	</logger>

	<!-- jdbc.connection : Connection 관련 정보를 기록 - Open 또는 Close -->
	<logger name="jdbc.connection">
		<level value="info"/>
	</logger>

	<!-- Root Logger -->
	<!-- root : 최상위 기록 정보(Logger)를 설정하기 위한 엘리먼트 -->
	<!-- => 모든 패키지의 클래스에 기본적으로 적용되는 기록정보 -->
	<!-- => 모든 logger 엘리먼트가 root 엘리먼트의 기록 정보를 상속받아 사용 -->
	<root>
		<!-- priority : 기본 로그 이벤트를 설정하기 위한 엘리먼트 -->
		<!-- value 속성 : 로그 이벤트를 속성값으로 설정 -->
			<!-- 모든 팩키지 클래스에서 경고 이상의 이벤트가 발생하면 기록하겠다는 의미 -->
			<!-- logger는 override 했다고 생각가능 -->
		<priority value="warn" />
		<!-- appender-ref = 기록자(Appender)를 설정하기 위한 엘리먼트 -->
		<!-- => 모든 logger 엘리먼트에서 기록자(Appender)를 사용 -->
		<!-- ref 속성 : appender 엘리먼트의 식별자를 속성값으로 설정 -->
		<appender-ref ref="console" />
			<!-- logger들 모두 해당 appender-ref를 가진다고 보면된다.(console) -->
	</root>
		<!-- 기록은 대부분 프로그램이 실행될 때 발생 -->
	
</log4j:configuration>
