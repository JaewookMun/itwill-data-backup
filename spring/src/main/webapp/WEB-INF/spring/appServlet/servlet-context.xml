<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller 어노테이션을 이용하여 Controller 클래스를 Spring
	Bean으로 등록하여 요청 처리 메소드를 작성해 요청처리할 수 있도록 등록하는 어노테이션 -->
		<!-- 내부적으로 어노테이션을 자동으로 처리할 수 있게 끔 하는 엘리먼트이다. -->
		<!-- => 요청 처리 메소드를 처리하기 위해 필요 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- resources : Front Controller를 사용하지 않고 직접 요청하여 응답되도록 설정하는 엘리먼트 -->
	<!-- => 리소스 파일을 클라이언트에게 직접 제공하기 위해 사용 -->
	<!-- mapping 속성 : 리소스파일을 요청할 수 있는 URL 패턴을 속성값으로 설정 -->
	<!-- => [**] 기호를 속성값으로 사용한 경우 하위 폴더를 포함한 모든 리소스 파일을 표현  -->
	<!-- location 속성 : 리소스 파일이 저장된 폴더 경로를 속성값으로 설정 -->
		<!-- '/resources/**'로 접근하면 Front Controller가 처리하지 않고 직접 접근할 수 있다. -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />
		<!-- mapping 속성으로 등록된 패턴으로 요청이 오면 프론트 컨트롤러를 거치지 않고 location 폴더경로로 직접 접근한다. -->
		<!-- in case of lecturer : resource 파일은 한곳에 모아서 관리하는게 효율적이라 resources 폴더에 넣어 관리 -->


	<!-- BeanNameViewResolver : 요청 처리 메소드에서 beanName을 제공받아 해당 beanName의
	Spring Bean의 실행 메소드를 호출하여 클라이언트에게 응답하는 기능의 ViewResolver -->
	<!-- => JSP 문서를 이용한 응답이 아닌 명령 실행이 목적인 ViewResolver -->
	<!-- => JSP 문서로 응답하는 ViewResolver보다 반드시 우선순위가 높도록 설정 -->
		<!-- 프로그램을 실행시켜줌 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1"/>
			<!-- BeanNameViewResolver는 무조건 1순위 -->
	</beans:bean>


	<!-- UrlBasedViewResolver 클래스를 Spring Bean으로 등록 -->
	<!-- UrlBasedViewResolver : Spring Framework에서 제공하는 ViewResolver가 아닌 외부에서
	제공하는 ViewResolver를 이용하여 응답 처리하기 위한 기능을 제공하는 객체 -->
		<!-- spring framework에서는 약 6개의 view resolver를 제공한다. - view name을 jsp이름으로 바꾸어준다. -->
		<!-- Tiles는 apache에서 제공하는 ViewResolver이다.(Spring에서만 사용가능) => https://tiles.apache.org/ -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- viewClass 필드에 외부에서 제공하는 ViewResolver 클래스(TilesView)를 인젝션 처리 -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- order 필드에 ViewResolver 사용에 대한 우선순위 관련 정수값을 인젝션 처리 -->
		<!-- => 정수값이 낮을수록 우선순위가 높게 설정 -->
			<!-- ViewResolver가 2개 이상일 때는 order 필드를 통해 순서 설정 -->
		<beans:property name="order" value="2"/>
	</beans:bean>
		<!-- viewName(url)이 반환되었을 때 TilesView가 처리하고 TilesView가 처리못할 시 InternalResourceViewResolver가 처리한다. -->
		<!-- viewName을 받아서 jsp로 바꾸기 위해 필요한 정보가 필요한데 아래 bean 엘리먼트가
		이에 관한 정보를 나타낸다. -->
	
	<!-- TilesConfigurer 클래스를 Spring Bean으로 등록 -->
	<!-- TilesConfigurer : Tiles 프로그램에서 사용할 템플릿 페이지 정보가 저장된 XML 파일
	(Tiles Configuration File)을 저장하기 위한 객체 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- definitions 필드에 List 객체를 생성하여 인젝션 처리 -->
		<!-- => List 객체의 요소로 Tiles Configuration File의 경로를 추가 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- InternalResourceViewResolver : 요청 처리 메소드에서 반환되는 ViewName을 전달받아
	응답처리하기 위한 JSP 문서의 경로로 변환하여 제공하는 클래스 -->	
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3"/>
	</beans:bean>
			<!-- JSP 문서의 경로를 제공하여 포워드 이동. -->
			<!-- ViewResolver의 종류는 다양하며 여러개 있어도 상관없다. -->

	<!-- component-scan : Spring 어노테이션을 사용한 클래스가 작성된 패키지를 설정하는 엘리먼트 -->
	<!-- => 패키지에 작성된 클래스의 어노테이션을 Spring Container가 처리 -->
	<!-- <context:component-scan base-package="xyz.itwill.controller" /> -->
	<context:component-scan base-package="xyz.itwill10.controller" />
	<context:component-scan base-package="xyz.itwill10.dao" />
	<context:component-scan base-package="xyz.itwill10.service" />
		<!-- 상위 패키지에 적용하여 모두 적용시키는 방법도 존재한다. -->	
		<!-- eg. ~ base-package="xyz.itwill" -->
		
		<!-- spring aop를 사용하기 위해 Namespaces에서 [tx] 네임스페이스 선택처리 -->	
	<!-- Spring AOP 기능을 이용한 트랜젝션 처리 -->
	<!-- 1. Spring-tx 라이브러리 빌드 처리 >> spring-jdbc 라이브러리에 의해 자동 빌드 -->
	<!-- 2. root-context.xml 파일에서 TransactionManager 관련 클래스를 Spring Bean으로 등록 -->
	<!-- 3. Bean Configuration File에서 AspectJ를 이용하여 AOP 설정 -->
	<!-- => @Transactional 어노테이션을 이용하여 AOP 설정 가능 -->
	
	<!-- advice : TransactionManager 관련 Spring Bean을 Advisor로 설정하는 엘리먼트 - tx NameSpace 추가 -->
	<!-- Advisor : JoinPoint가 자동으로 설정된 횡단관심모듈이 등록된 Advice 클래스의 Spring Bean -->
	<!-- attributes : 트랜젝션 처리 관련 정보를 설정하기 위한 엘리먼트 -->
	<!-- method : 트랜젝션 처리 메소드를 설정하는 엘리먼트 -->
	<!-- name 속성 : 메소드 이름에 대한 패턴을 속성값으로 설정 -->
		<!-- eg) add/modify/erase로 시작하는 이름의 메소드가 있을 경우 Exception에 대해 롤백처리 -->
	<!-- rollback-for 속성 : ROLLBACK 명령을 실행하기 위한 예외를 속성값으로 설정 -->	
	<!-- read-only 속성 : false(기본) 또는 true(읽기 전용) 중 하나를 속성값으로 설정 -->
	<!--  
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" rollback-for="Exception"/>
			<tx:method name="modify*" rollback-for="Exception"/>
			<tx:method name="erase*" rollback-for="Exception"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	-->
				<!-- 
					해당 메소드에서 DAO 별로 session을 사용하는 것이 아니라
					설정한 이름패턴을 갖는 메소드에서는 하나의 session을 가지고 dao 명령을 처리하고
					예외가 발생하면 롤백처리한다.
					
					sqlSessionTemplate의 메소드가 실행될 때마다 관리하는 sqlSession의 lifetime을
					tx:attribute에 설정된 메소드가 sqlSession을 관리한다고 보면 된다. 
				-->
	
	<!-- config : AOP 기능을 설정하기 위한 엘리먼트 - aop NameSpace 추가 -->
	<!-- advisor : advice 엘리먼트로 설정된 Advisor를 사용하기 위한 엘리먼트 -->
	<!-- advice-ref 속성 : advice 엘리먼트의 식별자를 속성값으로 설정 -->
	<!--  
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* xyz.itwill10.service..*(..))"/>
	</aop:config>
	-->
	
	<!-- 인터셉터 클래스를 Spring Bean으로 등록 -->
	<beans:bean class="xyz.itwill10.util.AdminAuthInterceptor" id="adminAuthInterceptor"/>
	<beans:bean class="xyz.itwill10.util.LoginAuthInterceptor" id="loginAuthInterceptor"/>
	
	
	<!-- interceptors : 인터셉터를 설정하기 위한 상위 엘리먼트 -->
	<interceptors>
		<!-- interceptor : 인터셉터를 등록하기 위한 엘리먼트 -->
		<interceptor>
			<!-- mapping : 인터셉터가 동작될 요청 URL 주소의 패턴을 등록하는 엘리먼트 -->
			<!-- path 속성 : 요청 URL 주소의 패턴을 속성값으로 설정 -->
				<!-- <mapping path="/userinfo/join/*"/> -->
				<!-- 위처럼 path에 *를 사용하여 모든 대상으로 설정할 수도 있다. -->
			<mapping path="/userinfo/join"/>
			<mapping path="/userinfo/modify"/>
			<mapping path="/userinfo/remove"/>
				<!-- ref : 클라이언트 요청에 의해 동작될 인터셉터 클래스의 Spring Bean을 설정하는 엘리먼트 -->
				<!-- bean 속성 : 인터셉터 클래스의 beanName을 속성값으로 설정 -->
			<beans:ref bean="adminAuthInterceptor"/>
		</interceptor>
		
		<interceptor>
			<!-- * : 모든 요청(현재 폴더의 모든 페이지), ** : 모든 요청(현재 폴더와 및 하위 폴더의 모든 페이지) -->
			<!-- <mapping path="/userinfo/*"/> -->
				<!-- userinfo에 있는 페이지를 요청했을 때 -->
			<!-- <mapping path="/userinfo/li*"/> -->
			<!-- <mapping path="/userinfo/**"/> -->
				<!-- userinfo 의 하위 폴더들을 포함한 모든 요청 -->
				
			<!-- exclude-mapping : 인터셉터를 사용하지 않는 요청 URL 주소의 패턴을 설정하는 엘리먼트 -->
			<!-- <exclude-mapping path="/userinfo/login"/> -->

				<!-- 권한처리는 인터셉터가 알아서 다해주기 때문에 적절히 설정해주면 된다. -->
			<mapping path="/userinfo/list"/>
			<mapping path="/userinfo/view"/>
			<beans:ref bean="loginAuthInterceptor"/>
		</interceptor>
	</interceptors>
	
	<!-- 파일 업로드 기능을 제공하는 클래스를 Spring Bean으로 등록 -->
	<!-- => beanName은 반드시 multipartResolver로 설정 -->
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<!-- maxUploadSize 필드에 업로드 파일의 제한 용량(Byte)을 인젝션 처리 -->
		<beans:property name="maxUploadSize" value="20971520"/>
			<!-- 위는 20 메가바이트로 설정 -->
		<!-- defaultEncoding 필드에 전달값에 대한 캐릭터셋의 인코딩을 인젝션 처리 -->	
		<beans:property name="defaultEncoding" value="utf-8"/>
	</beans:bean>
	
	<!-- 파일 다운로드 기능을 제공하는 클래스를 Spring Bean으로 등록 -->
	<!-- => 요청 처리 메소드의 반환값과 beanName을 동일하게 설정 -->
	<beans:bean class="xyz.itwill10.util.FileDownload" id="fileDownload"/>
</beans:beans>
