<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN" "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">
<tiles-definitions>
	<!-- definition : 템플릿 페이지를 설정하기 위한 상위 엘리먼트 -->	
	<!-- name 속성 : definition 엘리먼트의 식별자를 속성값으로 설정 -->
	<!-- => 요청 처리 메소드의 반환값(ViewName)으로 사용 -->
	<!-- template 속성 : 템플릿 페이지의 JSP 문서 경로를 속성값으로 설정 - 뷰페이지 지정 -->
		<!-- 요청처리 메소드에서 'main'을 반환하면 해당 엘리먼트가 동작 - main 반환 시 ~/template.jsp 로 이동 -->
		<!-- Spring 내부 뷰리졸버의 경우 뷰네임을 합쳐서 jsp 이름을 반환한다면 tiles는 jsp가 이미 정해져있다. -->
	<definition name="main" template="/WEB-INF/views/layout/template.jsp">
		<!-- put-attribute : 템플릿 페이지를 구성하는 JSP 문서를 지정하기 위한 엘리먼트 -->
		<!-- name 속성 : put-attribute 엘리먼트의 식별자를 속성값으로 설정 -->
		<!-- value 속성 : 템플릿 페이지에 포함될 JSP 문서의 경로를 속성값으로 설정 -->
		<put-attribute name="header" value="/WEB-INF/views/layout/header.jsp"/>
		<put-attribute name="content" value="/WEB-INF/views/layout/main.jsp"/>
		<put-attribute name="footer" value="/WEB-INF/views/layout/footer.jsp"/>
			<!-- layout 폴더를 굳이 만들어 사용할 필요는 없다. -->
	</definition>
		<!-- 
			main을 반환하면 template.jsp를 읽어들이는데 template에는 header, content, footer 속성이 존재한다. 
			template은 header, content, footer 이름으로 가져와 포함시킬 수 있다.
			=> 'main' 이름이 반환될 경우 응답.
			=> main이 반환되지 않을 경우 internalResourceViewResolver로 응답된다. 
		-->
	
	<definition name="admin" template="/WEB-INF/views/admin/admin_template.jsp">
			<!-- 다른 템플릿 페이지를 사용하고 싶다면 name 속성값이 [*]인 definition 엘리먼트 위에 설정 -->
		<put-attribute name="header" value="/WEB-INF/views/admin/admin_header.jsp"/>
		<put-attribute name="content" value="/WEB-INF/views/admin/admin_main.jsp"/>
	</definition>

	<definition name="admin/*" extends="admin">
			<!-- 다른 템플릿 페이지를 사용하고 싶다면 name 속성값이 [*]인 definition 엘리먼트 위에 설정 -->
		<put-attribute name="content" value="/WEB-INF/views/admin/{1}.jsp"/>
	</definition>
	
	<definition name="admin/*/*" extends="admin">
		<put-attribute name="content" value="/WEB-INF/views/admin/{1}/{2}.jsp"/>
	</definition>
	
		
	<!-- name 속성값으로 [*]을 설정한 경우 요청 처리 메소드의 반환값이 "파일명"인 경우
	definition 엘리먼트의 템플릿 페이지로 응답되도록 설정 -->		
	<!-- extends 속성 : definition 엘리먼트의 식별자를 속성값으로 설정 -->
	<!-- => definition 엘리먼트의 템플릿 페이지 정보를 상속받아 사용 -->
		<!-- [*] - 모든 반환값 (파일명으로 반환될 때) -->
		<!-- wild character(와일드카드/pattern character) : * - 모든 (오라클[%]을 제외하고 모두 *을 사용), ? - 문자 하나  -->
	<definition name="*" extends="main">
		<!-- 상속받은 definition 엘리먼트의 정보에서 put-attribute 엘리먼트의 식별자(name 속성값)가
		중복될 경우 새로운 JSP 문서 경로로 변경 - Override -->
		<!-- definition 엘리먼트의 name 속성값이 [*]인 경우 put-attribute 엘리먼트의 value
		속성값에서 {정수값}으로 요청 처리 메소드의 반환값 표현 -->	
		<put-attribute name="content" value="/WEB-INF/views/{1}.jsp"/>
	</definition>
	
	<!-- name 속성값으로 [*/*]을 설정한 경우 요청 처리 메소드의 반환값이 "폴더명/파일명"인 경우
	definition 엘리먼트의 템플릿 페이지로 응답되도록 설정 -->		
		<!-- 앞의 별은 폴더 / 뒤의 별은 파일명이 된다. -->
	<definition name="*/*" extends="main">
		<put-attribute name="content" value="/WEB-INF/views/{1}/{2}.jsp"/>
	</definition>

	<!-- name 속성값으로 [*/*/*]을 설정한 경우 요청 처리 메소드의 반환값이 "폴더명/폴더명/파일명"인 경우
	definition 엘리먼트의 템플릿 페이지로 응답되도록 설정 -->		
	<definition name="*/*/*" extends="main">
		<put-attribute name="content" value="/WEB-INF/views/{1}/{2}/{3}.jsp"/>
	</definition>
		
		<!-- 위 definition 3개는 main을 상속받아 content만 바뀌는 형태로 출력된다. -->
		<!-- 기존 생성 뷰(jsp)를 재활용할 수 있다. -->
		
</tiles-definitions>