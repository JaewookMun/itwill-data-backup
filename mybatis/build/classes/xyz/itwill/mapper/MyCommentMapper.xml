<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyCommentMapper">
	<!-- cache : SELECT 명령의 검색결과를 Cache 메모리에 저장하여 보다 빠른 검색결과를 제공하는 엘리먼트 -->
	<!-- => INSERT, UPDATE, DELETE 명령이 실행되면 Cache 메모리에 저장된 검색결과는 자동 초기화 -->
	<!-- => 검색결과를 저장하는 클래스는 반드시 객체직렬화 클래스로 선언 -->
		<!-- cache 메모리 - 임시메모리 -->
		<!-- cache를 사용하여 select 명령을 좀 더 빠르게하기 위해서는 객체직렬화처리해야함 -->
		<!-- Serializable 인터페이스 상속 -->
		<!-- cache에 저장된 값을 가져다 사용 -->
	<!-- <cache/> -->

	<insert id="insertComment" parameterType="MyComment1">
		<!-- selectKey : SELECT 명령의 검색 결과값을 인스턴스의 필드값으로 저장하기 위한 엘리먼트 -->
		<!-- => insert 엘리먼트의 하위 엘리먼트 -->
		<!-- => 자동 증가값 또는 난수값을 검색하여 인스턴스의 필드에 저장 -->
		<!-- resultType 속성 : 검색 결과값을 매핑하기 위한 Java 자료형(별칭)을 속성값으로 설정 -->
		<!-- keyProperty 속성 : 검색 결과값을 저장하기 위한 인스턴스의 필드명을 속성값으로 설정 -->
		<!-- order 속성 : BEFORE 또는 AFTER 중 하나를 속성값으로 설정 -->
			<!-- MsSql에만 난수값 생성기능 존재 -->
			<!-- insert 엘리먼트에서만 사용 가능 -->
			<!-- nextval값을 확인할 수 없기 때문에 selectKey를 통해 nextval의 값을 확인할 수 있다. -->
		<selectKey resultType="int" keyProperty="commentNo" order="BEFORE">
			<!-- _int로 하면 int / 'int'로 하면 Integer 인스턴스로 처리됨. -->
			select mycomment_seq.nextval from dual
		</selectKey>
		INSERT INTO mycomment VALUES(#{commentNo}, #{commentId},#{commentContent}, sysdate)
			<!-- selectKey 값이 commentNo 컬럼값에 저장되고 이를 행의 컬럼값으로 삽입함. -->
	</insert>
	
	<!-- 검색행의 컬럼명과 같은 이름의 필드에 컬럼값이 자동으로 매핑되어 인스턴스 제공 -->
	<!-- => mybatis 환경설정파일의 setting 엘리먼트에서 설정된 옵션에 의해 스네이크 표기법으로
	작성된 컬럼명이 자동으로 카멜 표기법으로 변경되어 매핑 -->
	<select id="selectCommentList1" resultType="MyComment1">
			<!-- config에서 관련 setting 값(mapUnderScoreToCamel~)을 true로 바꾸었기 때문에 컬럼이 DTO에 자동으로 매핑 -->
		SELECT * FROM mycomment ORDER BY comment_no desc
	</select>
	
	<!-- 검색행의 컬럼명과 클래스의 필드명이 모두 다른 경우 모든 필드에 컬럼값이 매핑되지
	않아 DTO 인스턴스 대신 NULL 반환 -->
	<!--  
	<select id="selectCommentList2" resultType="MyComment2">
		SELECT * FROM mycomment ORDER BY comment_no desc
	</select>
	-->
	
	<!-- 검색행의 컬럼명을 필드명과 같은 이름의 별칭으로 바꾸어 검색하면 클래스의 필드에
	컬럼값이 자동 매핑되어 인스턴스 반환 -->
	<!--  
	<select id="selectCommentList2" resultType="MyComment2">
		SELECT comment_no no, comment_id id, comment_content content, comment_date "date" 
			FROM mycomment ORDER BY comment_no desc
	</select>
	-->
			<!-- date는 식별자로 사용할 수 없기 때문에 더블쿼테이션을 이용하여 별칭으로 처리한다. -->	
	
	<!-- resultMap 엘리먼트를 이용하여 검색행의 컬럼값을 클래스의 필드에 매핑되어 저장되도록 설정 -->
	<!-- => id 엘리먼트와 result 엘리먼트를 이용하여 매핑 처리 -->
	<!-- => 기본 생성자로 DTO 인스턴스를 생성하고 Setter 메소드를 호출하여 검색행의 컬럼값을 
	전달받아 필드값으로 변경 처리 -->
	<resultMap type="MyComment2" id="myComment2ResultMap">
		<id column="comment_no" property="no"/>
			<!-- PK 설정된 컬럼 -->
		<result column="comment_id" property="id"/>	
		<result column="comment_content" property="content"/>	
		<result column="comment_date" property="date"/>	
	</resultMap>

	<!-- resultMap 속성에 매핑정보를 제공하는 resultMap 엘리먼트의 식별자를 속성값으로
	설정하여 매핑 처리된 인스턴스 반환 -->
	<!--  
	<select id="selectCommentList2" resultMap="myComment2ResultMap">
		SELECT * FROM mycomment ORDER BY comment_no desc
	</select>
	-->
		<!--
			MyComment2로 인스턴스를 생성하고 값을 매핑한 뒤 인스턴스를 반환한다고 생각하면 된다. 
			별칭을 사용해도 되지만 resultmap 사용을 좀더 권장(유지보수에 더 나음) 
		-->
	
	<!-- 매개변수가 선언된 생성자를 이용하여 DTO 인스턴스를 생성하며 생성자의 초기화 명령으로
	검색행의 컬럼값을 필드값으로 저장되도록 매핑정보 제공 -->
	<resultMap type="MyComment2" id="myComment2ConstructorResultMap">
		<!-- constructor : 생성자를 이용하여 매핑 처리하기 위한 정보를 제공하는 상위 엘리먼트 -->
		<!-- => 하위 엘리먼트(idArg 엘리먼트와 arg 엘리먼트)를 이용하여 매핑정보 제공 -->
		<!-- => 생성자의 매개변수와 하위 엘리먼트의 갯수 및 Java 자료형이 반드시 동일 -->
		<constructor>
			<!-- idArg : 검색행의 컬럼값을 생성자의 매개변수에 전달하기 위한 엘리먼트 -->
			<!-- => PK 제약조건이 부여된 컬럼값을 매개변수에 전달하기 위해 사용 -->
			<!-- column 속성 : 검색행의 컬럼명을 속성값으로 설정 -->
			<!-- javaType 속성 : 검색행의 컬럼값에 대한 java 자료형을 속성값으로 설정 -->
			<!-- => Java 자료형 대신 별칭 사용 가능 -->
				<!-- 여기서 변수의 이름이 중요한 것이 아니다. -->
			<idArg column="comment_no" javaType="_int"/>
			<!-- arg : 검색행의 컬럼값을 생성자의 매개변수에 전달하기 위한 엘리먼트 -->
			<arg column="comment_id" javaType="string"/>
			<arg column="comment_content" javaType="string"/>
			<arg column="comment_date" javaType="string"/>
		</constructor>
				<!-- 생성자를 호출하여 생성자 매개변수에 검색행의 컬럼값을 저장 -->
				<!-- javaType이 맞지 않으면 에러가 뜨며 사용하는 것을 권잔하지 않음
				하지만 가독성 측면에서 사용하는 사람들 존재. -->
				<!-- 잘 사용하지 않음. - 굳이 생성자를 만들면서 할 필요까지는 x -->
	</resultMap>	
	
	<select id="selectCommentList2" resultMap="myComment2ConstructorResultMap">
		SELECT * FROM mycomment ORDER BY comment_no desc
	</select>	
	<!--  
	<select id="selectCommentList3" resultType="MyComment3">
		select comment_no "no", comment_id "id", user_name "name"
			, comment_content "content", comment_date "date" 
			from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>	
	-->
		<!-- alias name을 직관적으로 보여주기 위해 "" 사용 -->
		<!-- 모든 컬럼을 다 검색하는 것은 비효율적이다. - 필요한 컬럼만 검색 (특히 JOIN을 사용할 때는 더더욱) -->

	<resultMap type="MyComment3" id="myComment3ResultMap">
		<id column="comment_no" property="no"/>
		<!-- <result column="comment_id" property="id"/> -->
		<result column="user_id" property="id"/>
		<result column="user_name" property="name"/>
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
	</resultMap>
	
	<select id="selectCommentList3" resultMap="myComment3ResultMap">
		select * from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
		<!-- resultMap 사용 권장 - 재사용성. -->	

	<select id="selectCommentUserList1" resultType="MyCommentUser1">
		select * from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	<!-- DTO 클래스가 필드의 자료형으로 작성된 경우 포함 관계를 제공하기 위해 resultMap
	엘리먼트를 이용하여 매핑 정보 제공 -->
		<!-- 상속은 관계가 자동으로 설정되지만 포함관계는 필드에 인스턴스를 저장하여 관계를 설정해야한다. -->
		<!-- 필드가 클래스로 선언되면 resultMap을 사용할 수 밖에 없다. -->
	<resultMap type="MyCommentUser2" id="myCommentUser2ResultMap">
		<!-- association : 1:1 관계의 테이블 조인 검색행의 컬럼값을 포함관계의 인스턴스를
		생성하여 포함 인스턴스의 필드값으로 매핑 설정하기 위한 엘리먼트 -->
		<!-- => DTO 인스턴스를 생성하여 포함관계가 성립되도록 필드에 저장 -->
		<!-- property 속성 : 포함 인스턴스를 저장하기 위한 필드명을 속성값으로 설정 -->
		<!-- javaType 속성 : 포함 인스턴스의 Java 자료형을 속성값으로 설정 -->
		<association property="comment" javaType="MyComment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
			<!-- comment라는 필드에 MyComment1 인스턴스를 생성하여 연결시켜주겠다. -->
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
		</association>
	</resultMap>
	
		<!-- MyCommentUser2는 아래처럼 만들어줄수 없다. -> resultMap -->
	<select id="selectCommentUserList2" resultMap="myCommentUser2ResultMap">
		select * from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
		<!-- 검색 결과 행들이 resultMap의 association의 javaType 클래스에 저장되고 
		javaType 클래스가 association에 설정된 필드에 저장된다고 보면된다. -->
	
	<!-- 게시글번호를 전달받아 MYCOMMENT 테이블에 저장된 게시글을 검색하는 SQL 명령 등록 -->
	<select id="selectComment" parameterType="int" resultType="MyComment1">
		select * from mycomment where comment_no=#{commentNo}
	</select>
	
	<!-- 댓글의 게시글번호를 전달받아 MYREPLY 테이블의 댓글목록을 검색하는 SQL 명령 등록 -->
	<select id="selectCommentNoReplyList" parameterType="int" resultType="MyReply">
		select * from myreply where reply_comment_no=#{replyCommentNo} order by reply_no desc
	</select>
	
	<resultMap type="MyCommentReply" id="myCommentReplyResultMap">
		<id column="comment_no" property="commentNo"/>
		<result column="comment_id" property="commentId"/>
		<result column="comment_content" property="commentContent"/>
		<result column="comment_date" property="commentDate"/>
		
		<!-- collection : 1:N 관계의 테이블 조인 결과를 List 인스턴스를 생성하여 필드에
		매핑되어 저장되도록 설정하기 위한 엘리먼트 -->
		<!-- property 속성 : List 인스턴스를 저장하기 위한 필드명을 속성값으로 설정 -->
		<!-- ofType 속성 : List 인스턴스에 저장된 요소의 Java 자료형을 속성값으로 설정 -->
		<collection property="replies" ofType="MyReply">
			<id column="reply_no" property="replyNo"/>
			<result column="reply_id" property="replyId"/>
			<result column="reply_content" property="replyContent"/>
			<result column="reply_date" property="replyDate"/>
			<result column="reply_comment_no" property="replyCommentNo"/>
		</collection>
	</resultMap>
		<!-- 엘리먼트의 순서는 상관없음. resultMap과 select의 순서가 바뀌어도됨 -->
	
	<!-- 1:N 관계의 조인에서는 OUTER JOIN을 사용하여 검색 -->
	<!-- => 댓글이 하나도 없는 게시글을 검색하기 위해 LEFT OUTER JOIN 사용 -->
		<!-- 1:1은 INNER JOIN 사용 - ~ from a JOIN b ON ~ -->
	<select id="selectCommentReply" parameterType="int" resultMap="myCommentReplyResultMap">
		select * from mycomment left join myreply on comment_no=reply_comment_no
			where comment_no=#{commentNo} order by reply_no desc
	</select>
		<!-- 
			2번 게시글의 경우 댓글이 없기 때문에 join 조건에 부합되지 않아 아무것도 검색되지 않는다. 
			inner join을 사용하면 검색되지 않는 경우가 있기 때문에 outer join을 통해 이를 방지
			- 댓글의 유무와 상관없이 게시글은 검색되어야 하기 때문에 left outer join 사용
			
			join 사용 때 결과 매핑시 강력한 프레임워크가 mybatis이다.
			
			JOIN 사용 시 검색하고자하는 컬럼명을 명시하고 엘리어스를 표기하여 작성한다. - 컬럼명 나열
			eg. SELECT 컬럼명1 alias1, 컬럼명2 alias2, ... 
		-->
	
	<!-- resultMap 엘리먼트의 하위 엘리먼트 선언 순서 -->
	<!-- => constructor >> id >> result >> association >> collection >> discriminator -->
	<!-- association 엘리먼트로 매핑 설정을 시작하는 경우 내부적으로 selectOne() 메소드로
	단일행에 대한 검색결과를 매핑하여 반환 -->
	<!-- 문제점) resultMap 엘리먼트가 association 엘리먼트로 시작되는 경우 collection
	엘리먼트를 같이 사용하여 다수행이 검색되면 매핑 처리 불가능(TooManyResultsException 발생 -->
	<!-- 해결법) resultMap 엘리먼트가 association 엘리먼트가 아닌 다른 엘리먼트로 시작되도록 
	매핑 설정 -->
		<!-- 
			association과 collection을 같이사용할 때 문제가 발생한다. 
			만약 같이 사용할 경우, association으로 시작되면 안된다.
		-->
		<!-- 
			constructor or id or result - 셋중 아무 엘리먼트로 시작되면 해결 
			내부적으로 selectList() 메소드를 호출하여 다수의 행이 검색되도 문제없음(검색결과가 0개 이상이여도 됨)
		-->
		<!-- resultMap은 association으로 시작되면 안됨 
			association만 사용하면 문제가 안되나 collection과 같이 사용하면 에러 발생-->
	<resultMap type="MyCommentReplyUser" id="myCommentReplyUserResultMap">
		<id column="comment_no" property="commentNo"/>
		<association property="comment" javaType="MyComment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
		</association>
		<collection property="replies" ofType="MyReplyUser">
			<association property="reply" javaType="MyReply">
				<id column="reply_no" property="replyNo"/>
				<result column="reply_id" property="replyId"/>
				<result column="reply_content" property="replyContent"/>
				<result column="reply_date" property="replyDate"/>
				<result column="reply_comment_no" property="replyCommentNo"/>
			</association>
			<!-- 
			<association property="user" javaType="MyUser">
				<id column="reply_user_id" property="userId"/>
				<id column="reply_user_name" property="userName"/>
			</association>
			-->
			<!-- columnPrefix 속성 : 검색행의 컬럼명 앞에 추가하고자 하는 문자값을 속성값으로 설정  -->
			<association property="user" javaType="MyUser" columnPrefix="reply_">
				<id column="user_id" property="userId"/>
				<id column="user_name" property="userName"/>
			</association>
		</collection>
	</resultMap>
			<!-- List(<collection>) 안에 다시 association 사용 -->
	
	<select id="selectCommentReplyUser" parameterType="int" resultMap="myCommentReplyUserResultMap">
		select * from mycomment join myuser on comment_id=user_id left join
			(select myreply.*, user_id reply_user_id, user_name reply_user_name
			from myreply join myuser on reply_id=user_id) 
			on comment_no=reply_comment_no where comment_no=#{commentNo}
			order by reply_no desc
				<!-- join 결과와 join 결과를 join 시키기 때문에
				컬럼명의 중복을 막기 위해 뒤에오는 join 결과의 일부 컬럼명을 별칭으로 지정 
				join을 할때 컬럼의 이름이 중복되는 경우가 많으며 이때 별칭을 통해서 구분지어준다. 
				-->
	</select>


</mapper>