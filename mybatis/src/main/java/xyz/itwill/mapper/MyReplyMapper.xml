<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyReplyMapper">
	<insert id="insertReply" parameterType="MyReply">
		<selectKey resultType="int" keyProperty="replyNo" order="BEFORE">
			select myreply_seq.nextval from dual
		</selectKey>
			<!-- MyReply의 replyNo에 nextval값 저장 -->
		insert into myreply values(#{replyNo},#{replyId},#{replyContent},sysdate,#{replyCommentNo})	
	</insert>
	
	<select id="selectReplyList" resultType="MyReply">
		select * from myreply order by reply_no desc
	</select>
		<!-- element id는 중복되지 않도록 설정한다. -->
	
	<!-- 엘리먼트에 등록된 SQL 명령에 관계연산자(> 또는 <)를 사용하면 엘리먼트 기호로
	인식되어 에러 발생 -->
	<!-- => SQL 명령에 XML에서 사용할 수 없는 문자가 존재할 경우 엔티티 레퍼런스로 변경하거나
	CDATA 세션을 사용하여 표현 -->
		<!-- &lt; - 엔티티문자 (Java에서는 이스케이프라고 함 \) -->
		<!-- [< 또는 >]기호를 사용하는 순간 에러발생 - 엘리먼트를 사용하는 기호. -->
	<select id="selectReplyCountList" resultType="MyReply">
		<!--  
		select rownum, reply.* from (select * from myreply order by reply_no desc) reply
			where rownum &lt;= 5
		-->
		<![CDATA[
		select rownum, reply.* from (select * from myreply order by reply_no desc) reply
			where rownum <= 5
		]]>
			<!-- 특수문자가 많아서 처리하기 불편할 때 위처럼 CDATA를 활용하면 효과적이다. -->
	</select>
	
		<!-- association을 사용하기 위해 resultMap 생성 -->
		
	<!--  
	<resultMap type="MyReplyUser" id="myReplyUserResultMap">
		<association property="reply" javaType="MyReply">
			<id column="reply_no" property="replyNo"/>
			<result column="reply_id" property="replyId"/>
			<result column="reply_content" property="replyContent"/>
			<result column="reply_date" property="replyDate"/>
			<result column="reply_comment_no" property="replyCommentNo"/>
		</association>
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
		</association>
	</resultMap>
	
	<select id="selectReplyUserList" resultMap="myReplyUserResultMap">
		select * from myreply join myuser on reply_id=user_id order by reply_no desc
	</select>
	-->
	
	<!-- 테이블 조인 명령을 사용하지 않고 2개 이상의 테이블에서 원하는 컬럼을 검색하여 맵핑하는 방법 -->
	<select id="selectReplyUserList" resultMap="myReplyUserResultMap">
		select * from myreply order by reply_no desc
	</select>
	
	<!-- association 엘리먼트에서 사용하기 위한 SELECT 명령 등록 -->
	<!-- => DAO 클래스에서 사용될 SQL 명령이 아니므로 Interface 맵퍼에 추상메소드 미선언 -->
	<!-- => WHERE 구문으로 조인조건을 명시 : 조인을 위한 컬럼값을 전달받아 사용 -->
	<select id="selectMyUser" parameterType="string" resultType="MyUser">
		select * from myuser where user_id=#{replyId}
	</select>
		<!-- replyId라는 회원정보만 가져와서 'myReplyUserResultMap'의 user에 넣는다. -->
	
	<resultMap type="MyReply" id="myReplyResultMap">
		<id column="reply_no" property="replyNo"/>
		<result column="reply_id" property="replyId"/>
		<result column="reply_content" property="replyContent"/>
		<result column="reply_date" property="replyDate"/>
		<result column="reply_comment_no" property="replyCommentNo"/>
	</resultMap>	
	
	<resultMap type="MyReplyUser" id="myReplyUserResultMap">
		<!-- resultMap 속성 : resultMap 엘리먼트의 식별자를 속성값으로 설정 -->
		<!-- => 기존의 매핑정보를 저장한 resultMap 엘리먼트 재사용 -->
			<!-- 기존의 resultMap을 활용하여 필드에 검색 컬럼값들을 매핑할 수 있다. -->
		<association property="reply" javaType="MyReply" resultMap="myReplyResultMap"/>
		<!-- column 속성 : 조인조건을 구현하기 위한 컬럼값이 저장된 컬럼명을 속성명으로 설정 -->
			<!-- 해당 속성값이 select 속성값으로 설정된 엘리먼트의 파라미터로 전달된다. -->
		<!-- select 속성 : SELECT 명령이 등록된 select 엘리먼트의 식별자를 속성값으로 설정 -->
		<association property="user" column="reply_id" select="selectMyUser"/>
			<!-- selectMyUser라는 명령을 실행한 결과를 user에 저장 -->
	</resultMap>
	
		<!--
			SQL문에서 join 조건을 사용하지 않고 select 엘리먼트를 활용하여 join 조건 처럼 활용할 수 있다. 
			association에 select를 활용하는 방법은 최근에 나옴. (가독성 높음.)
			권장하지는 않는다. - 기존 작성 엘리먼트를 재사용하기 위해 사용.
		-->

</mapper>